using System;
using System.Globalization;
using System.Linq;

using Kiota.Builder.CodeDOM;
using Kiota.Builder.Extensions;
using Kiota.Builder.Refiners;

namespace Kiota.Builder.Writers.Dart;
public class CodeEnumWriter : BaseElementWriter<CodeEnum, DartConventionService>
{
    public static string AutoGenerationHeader => "// <auto-generated/>";
    public CodeEnumWriter(DartConventionService conventionService) : base(conventionService) { }
    public override void WriteCodeElement(CodeEnum codeElement, LanguageWriter writer)
    {
        ArgumentNullException.ThrowIfNull(codeElement);
        ArgumentNullException.ThrowIfNull(writer);
        if (!codeElement.Options.Any())
            return;
        DartReservedNamesProvider reservedNamesProvider = new DartReservedNamesProvider();
        conventions.WriteShortDescription(codeElement, writer);
        if (codeElement.Flags)
            writer.WriteLine("[Flags]");
        conventions.WriteDeprecationAttribute(codeElement, writer);
        writer.StartBlock($"enum {codeElement.Name.ToFirstCharacterUpperCase()} {{");
        var idx = 0;
        foreach (var option in codeElement.Options)
        {
            conventions.WriteShortDescription(option, writer);
            var value = option.Name.ToLowerInvariant().ToCamelCase('_');
            if (reservedNamesProvider.ReservedNames.Contains(value))
            {
                value = value.ToUpperInvariant();
            }
            writer.WriteLine($"{value}{(codeElement.Flags ? " = " + GetEnumFlag(idx) : string.Empty)},");

            idx++;
        }
    }

    private static readonly Func<int, string> GetEnumFlag = static idx =>
        (idx == 0 ? 1 : Math.Pow(2, idx)).ToString(CultureInfo.InvariantCulture);
}

using System;
using System.Collections.Generic;
using System.Linq;

using Kiota.Builder.CodeDOM;
using Kiota.Builder.Extensions;
using Kiota.Builder.Refiners;
using Microsoft.OpenApi.Any;

namespace Kiota.Builder.Writers.Dart;
public class CodeEnumWriter : BaseElementWriter<CodeEnum, DartConventionService>
{
    public static string AutoGenerationHeader => "// <auto-generated/>";
    public CodeEnumWriter(DartConventionService conventionService) : base(conventionService) { }
    public override void WriteCodeElement(CodeEnum codeElement, LanguageWriter writer)
    {
        ArgumentNullException.ThrowIfNull(codeElement);
        ArgumentNullException.ThrowIfNull(writer);
        if (!codeElement.Options.Any())
            return;
        var enumName = codeElement.Name;
        conventions.WriteShortDescription(codeElement, writer);
        conventions.WriteDeprecationAttribute(codeElement, writer);
        writer.StartBlock($"enum {enumName} {{");

        var options = deduplicateOptions(codeElement.Options);
        var lastOption = options.Last();

        foreach (var option in options)
        {
            conventions.WriteShortDescription(option, writer);
            writer.WriteLine($"{option.Name}('{option.SerializationName}'){(option == lastOption ? ";" : ",")}");
        }
        writer.WriteLine($"const {enumName}(this.value);");
        writer.WriteLine("final String value;");
    }

    /// <summary>
    /// Prevents duplicate options by making sure the option names are unique
    /// </summary>
    /// <param name="options">All options for a single enum</param>
    /// <returns>A unique set of options</returns>
    private static HashSet<CodeEnumOption> deduplicateOptions(IEnumerable<CodeEnumOption> options)
    {
        HashSet<string> uniqueOptionNames = [];
        HashSet<CodeEnumOption> uniqueOptions = [];
        foreach (var option in options)
        {
            if (uniqueOptionNames.Add(option.Name))
            {
                uniqueOptions.Add(option);
            }
        }

        return uniqueOptions;
    }
}



using System;
using System.Collections.Generic;
using System.Linq;

using Kiota.Builder.CodeDOM;
using Kiota.Builder.Extensions;
using Kiota.Builder.Refiners;
using Microsoft.OpenApi.Any;

namespace Kiota.Builder.Writers.Dart;
public class CodeEnumWriter : BaseElementWriter<CodeEnum, DartConventionService>
{
    public static string AutoGenerationHeader => "// <auto-generated/>";
    public CodeEnumWriter(DartConventionService conventionService) : base(conventionService) { }
    public override void WriteCodeElement(CodeEnum codeElement, LanguageWriter writer)
    {
        ArgumentNullException.ThrowIfNull(codeElement);
        ArgumentNullException.ThrowIfNull(writer);
        if (!codeElement.Options.Any())
            return;
        var enumName = codeElement.Name;
        conventions.WriteLintingMessage(writer);
        conventions.WriteAutogeneratedMessage(writer);
        conventions.WriteShortDescription(codeElement, writer);
        conventions.WriteDeprecationAttribute(codeElement, writer);
        writer.StartBlock($"enum {enumName} {{");

        var options = codeElement.Options;
        var lastOption = options.Last();

        foreach (var option in options)
        {
            conventions.WriteShortDescription(option, writer);

            var serializationName = option.SerializationName;
            writer.WriteLine($"{option.Name}('{serializationName}'){(option == lastOption ? ";" : ",")}");
        }
        writer.WriteLine($"const {enumName}(this.value);");
        writer.WriteLine("final String value;");
    }
}

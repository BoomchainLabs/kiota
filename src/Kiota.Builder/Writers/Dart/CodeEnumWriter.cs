using System;
using System.Globalization;
using System.Linq;

using Kiota.Builder.CodeDOM;
using Kiota.Builder.Extensions;
using Kiota.Builder.Refiners;

namespace Kiota.Builder.Writers.Dart;
public class CodeEnumWriter : BaseElementWriter<CodeEnum, DartConventionService>
{
    public static string AutoGenerationHeader => "// <auto-generated/>";
    public CodeEnumWriter(DartConventionService conventionService) : base(conventionService) { }
    public override void WriteCodeElement(CodeEnum codeElement, LanguageWriter writer)
    {
        ArgumentNullException.ThrowIfNull(codeElement);
        ArgumentNullException.ThrowIfNull(writer);
        if (!codeElement.Options.Any())
            return;
        DartReservedNamesProvider reservedNamesProvider = new DartReservedNamesProvider();
        var enumName = codeElement.Name.ToFirstCharacterUpperCase();
        conventions.WriteShortDescription(codeElement, writer);
        conventions.WriteDeprecationAttribute(codeElement, writer);
        writer.StartBlock($"enum {enumName} {{");
        var lastOption = codeElement.Options.Last();

        foreach (var option in codeElement.Options)
        {
            conventions.WriteShortDescription(option, writer);
            var correctedName = getCorrectedName(option.Name);
            if (reservedNamesProvider.ReservedNames.Contains(correctedName))
            {
                correctedName = correctedName.ToUpperInvariant();
            }
            writer.WriteLine($"{correctedName}(\"{option.Name}\"){(option == lastOption ? ";" : ",")}");
        }
        writer.WriteLine($"const {enumName}(this.value);");
        writer.WriteLine("final String value;");
    }

    private string getCorrectedName(string name)
    {
        if (name.Contains('_', StringComparison.Ordinal))
            return name.ToLowerInvariant().ToCamelCase('_');
        return name.All(c => char.IsUpper(c)) ? name.ToLowerInvariant() : name;
    }
}
